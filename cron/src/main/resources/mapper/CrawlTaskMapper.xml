<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Jasmine code generator, a tool to build web crud application,with spring-
boot, mybatis, mysql,swagger,spring-security.
Generated at 2020-7-25 2:58:14 PM
All rights reserved by fuanlei(email:767550758@qq.com) since 2019 -->
<mapper namespace="com.jasmine.crawler.cron.mapper.CrawlTaskMapper">
    <insert id="add">
        insert into crawl_task
        (
         site_id,
         down_system_site_id,
         down_system_id,
         task_url_concurrency,
         bind_timeout_time
        )values(
          #{siteId},
          #{downSystemSiteId},
          #{downSystemId},
          #{taskUrlConcurrency},
          date_add(current_timestamp,interval greatest((select task_bind_timeout from down_system_site dss where dss.id = #{downSystemSiteId}),1) hour)
        )
    </insert>

    <delete id="deleteById">
         delete from crawl_task where id = #{id}
    </delete>

    <select id="getById" resultType="com.jasmine.crawler.common.pojo.entity.CrawlTask">
        select * from crawl_task where id = #{id}
    </select>

    <select id="getTaskToBind" resultType="com.jasmine.crawler.common.pojo.entity.CrawlTask">
        select
        ct.id,
        ct.site_id,
        ct.down_system_site_id,
        ct.down_system_id,
        ct.task_status
        from crawl_task ct
        join down_system_site dss on ct.down_system_site_id = dss.id and dss.enable_status = 1
        join down_system ds on dss.down_system_id =ds.id  and ds.enable_status = 1
        join site s on dss.site_id = s.id and s.enable_status = 1
        join down_system_site_run_limit lmt
        on (dss.id = lmt.down_system_site_id
        and lmt.hour = hour(current_timestamp )
        and lmt.week_day_type = weekday(current_timestamp))
        where
        -- 0 wait to bind
        ct.task_status = 1
        -- bind level filter
        and ct.bind_count >= #{minBindCount}
        and ct.bind_count &lt; #{maxBindCount}
        -- max con filter
        and dss.task_current_running_count &lt; dss.task_max_running_count
        and ds.task_current_running_count &lt; ds.task_max_running_count
        order by
        ct.create_time
        asc
  </select>
    <select id="getTaskToBindLowestLevel" resultType="com.jasmine.crawler.common.pojo.entity.CrawlTask">
        select
        *
        from crawl_task ct
        join down_system_site dss on ct.down_system_site_id = dss.id and dss.enable_status = 1
        join down_system ds on dss.down_system_id =ds.id  and ds.enable_status = 1
        join site s on dss.site_id = s.id and s.enable_status = 1
        join down_system_site_run_limit lmt
        on (dss.id = lmt.down_system_site_id
        and lmt.hour = hour(current_timestamp )
        and lmt.week_day_type = weekday(current_timestamp))
        where
        -- 0 wait to bind
        ct.task_status = 1
        and ct.bind_count >= 30
        and dss.task_current_running_count &lt; dss.task_max_running_count
        and ds.task_current_running_count &lt; ds.task_max_running_count
        order by
        ct.create_time
        asc
    </select>

    <update id="bindSuccess">
        update crawl_task
        set
        <if test="crawlerId!=null">
            crawler_id = #{crawlerId},
        </if>
        <if test="cookieId!=null">
            cookie_id = #{cookieId},
        </if>
        <if test="proxyId!=null">
            proxy_id = #{proxyId},
        </if>
        bind_last_result = 1,
        bind_last_time = current_timestamp,
        bind_last_msg = 'success',
        bind_count = bind_count + 1,
        task_url_concurrency = #{taskUrlConcurrency},
        task_status = 2
        where
        id = #{id}
    </update>
    <update id="bindFailed">
        update crawl_task
        set
        bind_last_result = #{bindLastResult},
        bind_last_time = current_timestamp,
        bind_last_msg = #{bindLastMsg},
        bind_count = bind_count + 1
        where
        id = #{id}
    </update>
    <select id="getTaskConfigsToDispatch" resultType="com.jasmine.crawler.cron.pojo.req.CrawlTaskConfig">
        select
        -- crawler config
        ct.crawler_id,
        dss.crawler_auto_download_page as auto_download_page,
        dss.crawler_crawl_type as crawl_type ,
        dss.crawler_page_encoding as encoding,
        dss.crawler_page_timeout as download_page_timeout,
        dss.crawler_page_headers as headers,
        dss.crawler_page_user_agent_type as user_agent_type,
        dss.task_url_max_fail_count as url_max_fail_count,
        dss.task_url_max_continuously_fail_count as url_max_continuously_fail_count,

        -- url config
        dss.url_match_patterns ,
        dss.url_encodes,
        dss.script_path,

        ct.cookie_id,
        ck.cookie,
        ct.task_url_concurrency,
        ct.id as task_id,
        ct.site_id,
        ct.down_system_site_id,

        ct.proxy_id,
        -- site
        s.ip_minute_speed_limit
        from crawl_task ct
        join down_system_site dss on ct.down_system_site_id =dss.id
        join down_system ds on dss.down_system_id =ds.id
        join site s on s.id = dss.site_id
        left join cookie ck on ct.cookie_id = ck.id
        where
        ct.task_status = 2
        order by ct.create_time asc
  </select>
    <update id="dispatchSuccess">
      update crawl_task
      set
      dispatch_last_result = 1,
      dispatch_last_msg = 'success',
      dispatch_last_time = current_timestamp,
      task_start_time = current_timestamp,
      task_timeout_time = date_add(
        current_timestamp,
        interval greatest((select task_timeout from down_system_site dss where dss.id =#{downSystemSiteId}),5) minute
      ),
      task_status = 3
      where id = #{id}
    </update>
    <update id="dispatchFailed">
      update crawl_task
      set
      dispatch_last_result = #{dispatchLastResult},
      dispatch_last_msg = #{dispatchLastMsg},
      dispatch_last_time = current_timestamp,
      -- set wait ot bind
      task_status = 1
      where id = #{id}
    </update>
    <update id="terminateExecuteTimeoutTask">
        update crawl_task
        set
           task_status = 4,
           task_result = 5,
           task_finish_time = current_timestamp
        where id = #{id}
    </update>
    <update id="bindTimeout">
        update crawl_task
        set
           task_status = 4,
           task_result = 4,
           task_finish_time = current_timestamp
        where id = #{id}
    </update>

    <select id="getTimeoutTasksToTerminate" resultType="com.jasmine.crawler.common.pojo.entity.CrawlTask">
        select
        *
        from crawl_task ct
        where
        ct.task_status = 3
        and (ct.task_timeout_time is not null and ct.task_timeout_time &lt; current_timestamp)
    </select>
    <select id="getForUpdate" resultType="com.jasmine.crawler.common.pojo.entity.CrawlTask">
        select * from crawl_task where id = #{id} for update
    </select>
    <select id="getBindTimeoutTasks" resultType="com.jasmine.crawler.common.pojo.entity.CrawlTask">
        select
        *
        from crawl_task ct
        where
        ct.task_status = 1
        and (ct.bind_timeout_time is not null and ct.bind_timeout_time &lt; current_timestamp)
    </select>
</mapper>
